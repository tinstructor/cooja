<?xml version="1.0"?>

<project name="COOJA Simulator" default="run" basedir=".">
  <fail message="Ant 1.10+ required">
    <condition>
      <not><antversion atleast="1.10" /></not>
    </condition>
  </fail>

  <!-- Ant ignores the release tag when using an old JDK. Make sure
       we fail when detecting a class that was removed in Java 11. -->
  <fail message="Java 11+ is required to build">
    <condition>
      <available classname="javax.xml.ws.Service"/>
    </condition>
  </fail>

  <property name="languageversion" value="11" />
  <property name="java" location="java"/>
  <property name="build" location="build"/>
  <property name="javadoc" location="javadoc"/>
  <property name="config" location="config"/>
  <property name="dist" location="dist"/>
  <property name="lib" location="lib"/>
  <property name="maxmem" value="2048m" />
  <!-- Flags passed to the JVM. Potentially useful flags for debugging
       crashes: -XX:+ShowMessageBoxOnError -->
  <property name="jvmargs" value="" />
  <property name="args" value="" />
  <property name="CC" value="gcc" />

  <property name="log4j.version" value="2.17.2" />

  <path id="cooja.classpath">
    <pathelement path="${build}"/>
    <pathelement location="lib/jcommon-1.0.14.jar"/>
    <pathelement location="lib/jdom.jar"/>
    <pathelement location="lib/jfreechart-1.0.11.jar"/>
    <pathelement location="lib/jipv6.jar"/>
    <pathelement location="lib/json-simple-1.1.1.jar"/>
    <pathelement location="lib/log4j-core-${log4j.version}.jar"/>
    <pathelement location="lib/log4j-api-${log4j.version}.jar"/>
    <!-- Downloaded from
         https://mvnrepository.com/artifact/info.picocli/picocli/4.6.3 -->
    <pathelement location="lib/picocli-4.6.3.jar"/>
    <pathelement location="lib/syntaxpane-1.2.0.jar"/>
    <pathelement location="lib/swingx-all-1.6.4.jar"/>
  </path>

  <target name="help">
    <echo>
The COOJA Simulator

  Start COOJA
  > ant run
  Start COOJA and immediately load simulation in sim.csc
  > ant run -Dargs="-quickstart=sim.csc"
  Start COOJA without GUI and run simulation in sim.csc
  > ant run -Dargs="-nogui=sim.csc"
  Start COOJA with more memory allocated (for large simulations)
  > ant run_bigmem

  Build COOJA (dist/cooja.jar) and all default projects (MSPSim et al.)
  > ant jar
    </echo>
  </target>

  <target name="javadoc">
    <delete dir="${javadoc}" quiet="true"/>
    <mkdir dir="${javadoc}/"/>
    <javadoc destdir="${javadoc}" source="${languageversion}">
      <fileset dir="${java}/" includes="**/*.java"/>
      <classpath refid="cooja.classpath"/>
    </javadoc>
  </target>

  <target name="compile">
    <mkdir dir="${build}"/>
    <javac srcdir="tools/coffee-manager" destdir="${build}" debug="on" release="${languageversion}"
           includeantruntime="false"
           encoding="utf-8">
    </javac>
    <javac srcdir="${java}" destdir="${build}" debug="on" release="${languageversion}"
           includeantruntime="false"
           encoding="utf-8">
      <classpath refid="cooja.classpath"/>
    </javac>
  </target>

  <target name="copy_configs">
    <mkdir dir="${build}"/>
    <copy todir="${build}">
      <fileset dir="${config}"/>
      <fileset dir="images"/>
      <fileset file="tools/coffee-manager/sky.properties"/>
      <fileset file="tools/coffee-manager/esb.properties"/>
    </copy>
  </target>

  <target name="clean">
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>

  <target name="run" depends="jar">
    <!-- FIXME: this target should let the JVM decide maxmemory, but Cooja
                currently crashes on 64-bit Ubuntu on machines with >8G
                memory if we don't set maxmemory. -->
    <java fork="yes" dir="${build}" jar="${dist}/cooja.jar"
          failonerror="true" maxmemory="${maxmem}">
      <sysproperty key="user.language" value="en"/>
      <jvmarg value="-Dnashorn.args=--no-deprecation-warning" />
      <jvmarg line="${jvmargs}" />
      <arg line="${args}"/>
    </java>
  </target>

  <!-- Target for debugging memory errors in Contiki-NG. Requires
       Contiki-NG to be built with -fsanitize=address, and possibly
       also -fno-omit-frame-pointer to get better backtraces,
       -fno-stack-protector on modern GCCs,
       and -fsanitize-recover=address if using halt_on_error=0. -->
  <target name="run_asan" depends="jar">
    <!-- GCC checks if stderr is a terminal to decide about color output.
         Force color since output is easier to read with colors. -->
    <property name="asan_color" value="always" />
    <!-- JVM needs to handle SEGV. Unlikely to find leaks in Contiki-NG.
         halt_on_error=0 requires CFLAGS/LDFLAGS to also contain
         -fsanitize-recover=address -->
    <property name="asan_options"
              value="color=${asan_color} handle_segv=0 detect_leaks=0" />
    <exec executable="${CC}" outputproperty="libasan">
      <arg value="-print-file-name=libasan.so"/>
    </exec>
    <!-- See maxmemory comment on run target. -->
    <java fork="yes" dir="${build}" jar="${dist}/cooja.jar"
          failonerror="true" maxmemory="${maxmem}">
      <!-- Address sanitizer needs to be initialized early, so LD_PRELOAD
           the library into the JVM. -->
      <env key="LD_PRELOAD" value="${libasan}"/>
      <env key="ASAN_OPTIONS" value="${asan_options}"/>
      <jvmarg value="-Dnashorn.args=--no-deprecation-warning" />
      <jvmarg line="${jvmargs}" />
      <arg line="${args}"/>
    </java>
  </target>

  <target name="run_bigmem" depends="jar">
    <java fork="yes" dir="${build}" jar="${dist}/cooja.jar"
          failonerror="true" maxmemory="${maxmem}">
      <jvmarg value="-Dnashorn.args=--no-deprecation-warning" />
      <jvmarg line="${jvmargs}" />
      <arg line="${args}"/>
    </java>
  </target>

  <pathconvert property="manifest.classpath" pathsep=" ">
    <path refid="cooja.classpath"/>
    <mapper>
      <chainedmapper>
        <flattenmapper/>
        <globmapper from="*.jar" to="lib/*.jar"/>
      </chainedmapper>
    </mapper>
  </pathconvert>

  <target name="jar" depends="compile, copy_configs">
    <mkdir dir="${dist}/lib"/>
    <jar destfile="${dist}/cooja.jar" basedir="${build}">
      <manifest>
        <attribute name="Main-Class" value="org.contikios.cooja.Main"/>
        <attribute name="Class-Path" value=". ${manifest.classpath}"/>
      </manifest>
    </jar>
    <copy todir="${dist}/lib">
      <fileset dir="${lib}"/>
    </copy>
  </target>

  <target name="runesb" depends="jar" description="run MSPSim with platform ESB">
    <property name="FIRMWAREFILE" value="firmware/esb/sensor-demo.esb"/>
    <java fork="true" classpath="${dist}/cooja.jar"
          classname="se.sics.mspsim.platform.esb.ESBNode">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${args}"/>
    </java>
  </target>

  <target name="runsky" depends="jar" description="run MSPSim with platform Sky">
    <property name="FIRMWAREFILE" value="firmware/sky/blink.sky"/>
    <java fork="true" classpath="${dist}/cooja.jar"
          classname="se.sics.mspsim.platform.sky.SkyNode">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${args}"/>
    </java>
  </target>

  <target name="runskyprof" depends="jar" description="run MSPSim with platform Sky for profiling">
    <property name="FIRMWAREFILE" value="firmware/sky/blink.sky"/>
    <java fork="true" classpath="${dist}/cooja.jar"
          classname="se.sics.mspsim.platform.sky.SkyNode">
      <jvmarg value="-agentlib:yjpagent" />
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${args}"/>
    </java>
  </target>

  <target name="runtelos" depends="jar" description="run MSPSim with platform Telos">
    <property name="FIRMWAREFILE" value="firmware/sky/blink.sky"/>
    <java fork="true" classpath="${dist}/cooja.jar"
          classname="se.sics.mspsim.platform.sky.TelosNode">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${args}"/>
    </java>
  </target>

  <target name="runjcreate" depends="jar" description="run MSPSim with platform Sentilla JCreate">
    <property name="FIRMWAREFILE" value="firmware/sky/blink.sky"/>
    <java fork="true" classpath="${dist}/cooja.jar"
          classname="se.sics.mspsim.platform.jcreate.JCreateNode">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${args}"/>
    </java>
  </target>

  <target name="runsentillausb" depends="jar" description="run MSPSim with platform Sentilla Gateway USB">
    <property name="FIRMWAREFILE" value="firmware/sky/blink.sky"/>
    <java fork="true" classpath="${dist}/cooja.jar"
          classname="se.sics.mspsim.platform.sentillausb.SentillaUSBNode">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${args}"/>
    </java>
  </target>

  <target name="runz1" depends="jar" description="run MSPSim with platform Zolertia Z1">
    <property name="FIRMWAREFILE" value="firmware/z1/blink.z1"/>
    <java fork="true" classpath="${dist}/cooja.jar"
          classname="se.sics.mspsim.platform.z1.Z1Node">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${args}"/>
    </java>
  </target>

  <target name="runwismote" depends="jar" description="run MSPSim with platform Wismote">
    <property name="FIRMWAREFILE" value="firmware/wismote/blink.wismote"/>
    <java fork="true" classpath="${dist}/cooja.jar"
          classname="se.sics.mspsim.platform.wismote.WismoteNode">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${args}"/>
    </java>
  </target>

  <target name="runtyndall" depends="jar" description="run MSPSim with platform Tyndall">
    <property name="FIRMWAREFILE" value="firmware/tyndall/blink.tyndall"/>
    <java fork="true" classpath="${dist}/cooja.jar"
          classname="se.sics.mspsim.platform.tyndall.TyndallNode">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${args}"/>
    </java>
  </target>

  <target name="runexp5438" depends="jar" description="run MSPSim with platform exp5438">
    <property name="FIRMWAREFILE" value="firmware/exp5438/tesetcase-bits.exp5438"/>
    <java fork="true" classpath="${dist}/cooja.jar"
          classname="se.sics.mspsim.platform.ti.Exp5438">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${args}"/>
    </java>
  </target>

  <target name="run-mspsim" depends="jar" description="run MSPSim">
    <property name="FIRMWAREFILE" value="firmware/sky/blink.sky"/>
    <java fork="true" classpath="${dist}/cooja.jar"
          classname="se.sics.mspsim.Main">
      <arg value="${FIRMWAREFILE}"/>
      <arg line="${args}"/>
    </java>
  </target>

  <target name="test-cpu" depends="jar" description="run MSPSim CPU test">
    <java fork="true" classpath="${dist}/cooja.jar"
          classname="se.sics.mspsim.util.Test"
          failonerror="true" timeout="10000">
      <arg value="firmware/sky/cputest.sky"/>
    </java>
  </target>

  <target name="test-timer" depends="jar" description="run MSPSim Timer test">
    <java fork="true" classpath="${dist}/cooja.jar"
          classname="se.sics.mspsim.util.Test"
          failonerror="true" timeout="10000">
      <arg value="firmware/sky/timertest.sky"/>
    </java>
  </target>

  <target name="test" depends="jar, test-cpu, test-timer"/>
</project>
